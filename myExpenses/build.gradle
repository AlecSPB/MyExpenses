import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'com.android.application'

ext {
 versionNumber1 = 2
 versionNumber2 = 4
 versionNumber3 = 8
 versionNumber4 = 0
}

def buildVersionNumber() {
  def result = versionNumber1 + "." + versionNumber2 + "." + versionNumber3
  if (versionNumber4 != 0) {
   result += "." + versionNumber4 
  }
  return result
}

def buildVersionNumberBlackBerry() {
  def result = versionNumber1 + "." + versionNumber2 + "." + versionNumber3 + "." + versionNumber4 
  return result
}
android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion

    defaultConfig {
        applicationId "org.totschnig.myexpenses"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_7
            targetCompatibility JavaVersion.VERSION_1_7
        }
        versionCode 211
        versionName buildVersionNumber()

        testApplicationId "org.totschnig.myexpenses.test"
        testInstrumentationRunner "android.test.InstrumentationTestRunner"

        buildConfigField "String", "PLATTFORM", "\"Android\""
    }
    signingConfigs {
        release {
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            //shrinkResources true // need to wait for resolution
            // https://code.google.com/p/android/issues/detail?id=79325
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-project.txt'
            signingConfig signingConfigs.release

        }
    }

    productFlavors {
        play {}
        amazon {}
        blackberry {
          versionName buildVersionNumberBlackBerry()
          buildConfigField "String", "PLATTFORM", "\"Blackberry\""
        }
    }

    sourceSets {
        play.java.srcDirs += "src/admob/java"
        play.res.srcDirs += "src/admob/res"
        amazon.java.srcDirs += "src/amazonMobileAds/java"
        amazon.res.srcDirs += "src/amazonMobileAds/res"
        blackberry.java.srcDirs += "src/amazonMobileAds/java"
        blackberry.res.srcDirs += "src/amazonMobileAds/res"
    }

    lintOptions {
        disable 'InvalidPackage', 'MissingQuantity', 'MissingTranslation', 'ImpliedQuantity'
    }

    dexOptions {
        javaMaxHeapSize "2048M"
        jumboMode = true
    }

}

dependencies {
    compile project(':StickyListHeaders:library')
    compile project(':MPAndroidChart:MPChartLib')
    compile project(':OpenIAB:library')
    compile project(':PlayLicensingOrig')
    compile 'com.android.support:appcompat-v7:19.0.1'
    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.itextpdf:itextpdf:5.5.2'
    compile 'ch.acra:acra:4.5.0'
    compile 'com.google.android.gms:play-services-ads:7.5.0'
    compile group: 'com.google.guava', name: 'guava', version: '18.0'
    compile 'org.apache.commons:commons-lang3:3.4'
    amazonCompile files('libs/amazon-ads-5.5.149.jar')
    androidTestCompile 'com.jayway.android.robotium:robotium-solo:5.2.1'
    testCompile 'junit:junit:4.12'
}
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMdd-HHmm')
    return formattedDate
}
task copyTask(type: Copy) { //why doesn't Gradle allow to force overwrite?
    from 'template/app.properties'
    into 'src/main/res/raw'
    filter(ReplaceTokens, tokens: ["build.date": getDate()])
}
task removeTask(type: Delete) {
    delete 'src/main/res/raw/app.properties'
}
project.afterEvaluate {
    android.applicationVariants.all { variant ->
        variant.outputs[0].processResources.dependsOn("copyTask")
    }
    clean.dependsOn("removeTask")
}
